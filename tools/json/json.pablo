#
# Part of the Parabix Project, under the Open Software License 3.0.
# SPDX# License-Identifier: OSL-3.0
#

type BasisBits = <i1>[8]
type UTF8Err = <i1>[1]

type Lex = <i1>[12] {
    lCurly,
    rCurly,
    lBracket,
    rBracket,
    colon,
    comma,
    hyphen,
    digit,
    n, # first letter of null
    f, # first letter of false
    t, # first letter of true
    ws
}

kernel ValidateUTF8 :: [BasisBits basis, Lex lex] -> [UTF8Err utf8Err] {
    utf8Err[0] = <0>

    # If non-ascii, validate UTF-8
    if basis[7] {
        suffix = <0>
        u8_error = <0>
        u8_FFFE_FFFF = <0>
        u8anyscope = <0>
        unibyte = ~basis[7]

        temp2 = basis[5] & ~basis[4]
        temp4 = basis[2] & ~basis[3]
        temp5 = basis[1] & ~basis[0]
        temp7 = basis[5] & basis[4]
        temp10 = basis[1] & basis[0]
        temp12 = basis[3] & basis[2]
        temp13 = basis[1] | basis[0]
        temp15 = temp12 & temp5
        temp19 = basis[0] & ~basis[1]
        temp20 = temp12 & temp19
        temp21 = basis[3] | basis[2]
        temp23 = temp12 & temp10
        temp36 = temp21 | temp13
        temp49 = basis[5] | basis[4]
        prefix = basis[7] & basis[6]
        prefix2 = prefix & ~basis[5]
        prefix3 = prefix & temp2
        prefix4 = prefix & temp7
        suffix = basis[7] & ~basis[6]
        temp66 = prefix & ~temp49
        temp67 = temp21 | basis[1]
        temp68 = temp66 & ~temp67
        temp69 = basis[2] & temp13
        temp70 = basis[3] | temp69
        temp71 = prefix4 & temp70
        badprefix = temp68 | temp71
        u8_error = badprefix
        scope22 = Advance(prefix2)
        u8anyscope = scope22
        if prefix3 | prefix4 {
            xE0 = prefix3 & ~temp36
            xED = prefix3 & temp20
            xF0 = prefix4 & ~temp36
            temp72 = temp4 & ~temp13
            xF4 = prefix4 & temp72
            xA0_xBF = suffix & basis[5]
            x80_x9F = suffix & ~basis[5]
            x90_xBF = suffix & temp49
            x80_x8F = suffix & ~temp49
            xEF = prefix3 & temp23
            temp73 = suffix & temp7
            xBF = temp73 & temp23
            xBE = temp73 & temp15

            scope32 = Advance(prefix3)
            scope33 = Advance(scope32)
            scope42 = Advance(prefix4)
            scope43 = Advance(scope42)
            scope44 = Advance(scope43)

            E0_F0_scope = Advance(xE0 | xF0)
            ED_F4_scope = Advance(xED | xF4)
            xE0_scope = scope32 & E0_F0_scope
            xED_scope = scope32 & ED_F4_scope
            xF0_scope = scope42 & E0_F0_scope
            xF4_scope = scope42 & ED_F4_scope
            xEF_scope = Advance(xEF)

            u8lastscope = scope22 | scope33 | scope44
            u8anyscope = u8lastscope | scope32 | scope42 | scope43

            u8error1 = xE0_scope & x80_x9F
            u8error2 = xED_scope & xA0_xBF
            u8error3 = xF0_scope & x80_x8F
            u8error4 = xF4_scope & x90_xBF

            u8_error = u8_error | u8error1 | u8error2 | u8error3 | u8error4

            EF_BF_pending = Advance(xEF_scope & xBF)

            u8_FFFE_FFFF = (EF_BF_pending & (xBE | xBF))
        }
        u8mismatch = u8anyscope ^ suffix
        u8_error = u8_error | u8mismatch | u8_FFFE_FFFF

        # sanitize error
        conflict = u8_error & lex.ws
        utf8Err[0] = u8_error ^ conflict
    }
}
